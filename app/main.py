from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from datetime import timedelta
from typing import List
from app.database import SessionLocal, engine
from app import models, crud, schemas,utils
models.Base.metadata.create_all(bind=engine)

app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.post("/auth/register", response_model=schemas.User)
def register(user: schemas.UserCreate, db: Session = Depends(utils.get_db)):
    db_user = crud.get_user_by_email(db, email=user.email)
    if db_user:
        raise HTTPException(status_code=400, detail="Email already registered")
    return crud.create_user(db=db, user=user)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.post("/auth/login", response_model=schemas.Token)
def login(user: schemas.UserCreate, db: Session = Depends(utils.get_db)):
    db_user = crud.get_user_by_email(db, email=user.email)
    if not db_user or not utils.pwd_context.verify(user.password, db_user.hashed_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect email or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    access_token_expires = timedelta(minutes=utils.ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = utils.create_access_token(
        data={"sub": db_user.email}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
@app.get("/transactions/", response_model=List[schemas.Transaction])
def read_transactions(
    skip: int = 0, 
    limit: int = 100, 
    db: Session = Depends(utils.get_db),
):
    # if current_user.is_operator:
    #     transactions = crud.get_transactions(db, skip=skip, limit=limit)
    # else:
    #     transactions = db.query(models.Transaction).filter(
    #         models.Transaction.owner_id == current_user.id
    #     ).offset(skip).limit(limit).all()
    # return transactions
    transactions = crud.get_transactions(db, skip=skip, limit=limit)
    return transactions

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@app.post("/transactions/{transaction_id}/verdict")
def update_verdict(
    transaction_id: int, 
    verdict: schemas.Verdict,
    db: Session = Depends(utils.get_db),
    current_user: models.User = Depends(utils.get_current_user)
):
    if not current_user.is_operator:
        raise HTTPException(status_code=403, detail="Only operators can update verdicts")
    
    transaction = crud.update_transaction_verdict(db, transaction_id, verdict.is_fraud)
    if not transaction:
        raise HTTPException(status_code=404, detail="Transaction not found")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    message = f"üö® Fraud alert!\nTransaction ID: {transaction_id}\nAmount: {transaction.amount}\nVerdict: {'Fraud' if verdict.is_fraud else 'Legitimate'}"
    utils.send_telegram_notification(message)
    
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
    if verdict.is_fraud:
        user = crud.get_user(db, transaction.owner_id)
        if user:
            user.is_blocked = True
            db.commit()
            db.refresh(user)
            return {"message": "User is blocked", "is_blocked": True}
    
    return {"message": "Verdict updated", "is_blocked": False}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
@app.post("/notifications/alert")
def send_notification(
    notification: schemas.NotificationCreate,
    db: Session = Depends(utils.get_db),
    current_user: models.User = Depends(utils.get_current_user)
):
    if not current_user.is_operator and notification.operator_id is None:
        raise HTTPException(
            status_code=403, 
            detail="Clients can only send notifications to specific operators"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_notification = crud.create_notification(db, notification)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    operator_msg = f"üîî New notification\nFrom: {current_user.username}\nMessage: {notification.message}"
    utils.send_telegram_notification(operator_msg)
    
    return {"status": "success"}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.get("/users/me", response_model=schemas.User)
def read_users_me(current_user: models.User = Depends(utils.get_current_user)):
    return current_user